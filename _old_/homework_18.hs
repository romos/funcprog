{--
    Task 1
    *Доп. задача, до 28.11*

    Описать sqrt2 как бесконечный список из чисел от 0 до 9, описывающий разложение sqrt(2) в бесконечную десятичную дробь. 

    Пример вызова:
    take 20 sqrt2

    Результат должен быть равен 
    [1,4,1,4,2,1,3,5,6,2,3,7,3,0,9,5,0,4,8,8]

    Замечания:
    - Это, видимо, больше задачка по выч. методам, а не по программированию.. Мне кажется, не очень сложная.
    - Подсказка: задача не очень сложная, потому что Haskell может выполнять операции над целыми числами любой длины. Тут это удобно.
--}
getDigit x num l r
  | l == r || l == r - 1 = if (num + r)^2 < x then r else l
  | otherwise =
    let
      mid = (l+r) `div` 2
    in if (num + mid)^2 < x then getDigit x num mid r else getDigit x num l mid

sqrt2' x num = 
    let
      dig = getDigit x num 0 9
    in dig : sqrt2' (100*x) (10*(num + dig))

sqrt2 = sqrt2' 2 0

{--
    Task 2
    *Доп. задача, до 4.11*

    Описать pascal как бесконечный список списков, содержащий треугольник Паскаля. 

    Дополнительное условие: В этой задаче нельзя определять никакие новые функции (кроме Pascal). Можно использовать стандартные функции. Можно (и я бы советовал) использовать прием tying the knot. 

    Пример вызова:
    take 6 pascal

    Результат должен быть равен 
    [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1], [1,5,10,10,5,1]]
--}
pascal = [1]:(zipWith (\xs ys -> 1 : zipWith (+) xs (tail ys ++ [0])) pascal pascal)
