{-- 
    Task 1

    Описать функцию minlist, которая ищет минимальный элемент в данном списке.

    Пример вызова:
    minlist [3,2,7]
    Ответ должен быть равен 2.

    Замечание: На самом деле, конечно, в Хаскеле есть такая стандарная функция (называется minimum), но, пожалуйста, в этой задаче вы ее не используйте.
--}
minlist (x:xs) = minlist1 xs x
minlist1 (x:xs) min
  | x > min = minlist1 xs min
  | otherwise = minlist1 xs x
minlist1 [] min = min

{-- 
    Task 2

    Описать функцию minsum, которая ищет минимум суммы двух стоящих рядом элементов в данном списке.

    Пример вызова:
    minsum [1,8,3,2,7]
    Ответ должен быть равен 5 (3+2).
--}
minsum (x:y:xs) = minsum1 xs (x + y)
minsum1 (x:y:xs) sum
  | x + y > sum = minsum1 (y:xs) sum
  | otherwise = minsum1 xs (x + y)
minsum1 [x] sum = sum
minsum1 [] sum = sum

{-- 
    Task 3

    Описать фунццию rev, которая для списка возвращает список из тех же элементов, но идуших в обратном порядке.

    Пример вызова:
    rev [1, 3, 7] 
    - должен получиться список [7, 3, 1].

    Замечания:
    - Желательно (но не обязательно) описать эту функцию так, чтобы ее время работы было O(n). Технически это означает, что желательно написать функцию, в которой не будет использоваться приписывание в конец списка с помощью ++[x].
    - Но, если так не получиться, присылайте любое решение, какое придумаете.
    - Конечно, в этой задаче нельзя использовать стандартную функцию reverse.
--}
rev xs = rev1 xs []
rev1 (x:xs) ys = rev1 xs (x:ys)
rev1 [] ys = ys

{-- 
    Task 4

    Описать функцию 
    check cond xs
    , которая для данного списка xs и логической функции cond проверяет, верно ли, что в списке есть элемент, для которого cond возвращает True. Результат должен быть равен True, если такой элемент есть, и False, если его нет.

    Пример вызова:
    check (\x->x>5) [3,2,7,4]
    Ответ должен быть равен True, потому что в списке есть число, большее 5 (это число 7). 

    Замечание: И такая стандартная функция в Хаскеле есть (называется any), но, пожалуйста, в этой задаче вы ее не используйте. 
--}
check cond (x:xs)
  | cond x = True
  | otherwise = check cond xs
check cond [] = False

{-- 
    Task 5

    Описать функцию checkDifferent, которая возвращает True, если все элементы в списке разные, и False, если среди них есть одинаковые.

    Примеры вызова:
    checkDifferent [3,2,7]
    Ответ должен быть равен True.
    checkDifferent [3,2,7,5,7,8]
    Ответ должен быть равен False (два раза встречается число 7).
--}
checkDifferent (x:xs)
  | any (\y -> y == x) xs = False
  | otherwise = checkDifferent xs
checkDifferent [] = True
